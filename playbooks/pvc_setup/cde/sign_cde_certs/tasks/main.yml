#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
- set_fact:
    dex_endpoint_api: "{{ cdp_endpoint_url }}/dex/api/v1"

- name: DEBUG - dex_endpoint_api
  debug:
    msg: "{{ dex_endpoint_api }}"

- name: Get CDE Services
  uri:
    url: "{{ dex_endpoint_api }}/cluster"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: cde_clusters

- set_fact:
    cde_service_id: "{{ cde_clusters.json | community.general.json_query(query) }}"
  vars:
    query: "[?name == '{{ virtual_cluster.cde_service_name }}' && status != 'ClusterDeletionCompleted' ].id | [0]"


# Get VC Id

- name: Get CDE VCs
  uri:
    url: "{{ dex_endpoint_api }}/cluster/{{ cde_service_id }}/instance"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: cde_vcs

- set_fact:
    cde_vc_id: "{{ cde_vcs.json | community.general.json_query(query_id) }}"
  vars:
    query_id: "[?name == '{{ virtual_cluster.name }}' && status == 'AppInstalled'].id | [0]"


# Get VC endpoint

- name: Get CDE VC Details
  uri:
    url: "{{ dex_endpoint_api }}/cluster/{{ cde_service_id }}/instance/{{ cde_vc_id }}"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: cde_vc_details

- set_fact:
    cde_vc_endpoint: "{{ cde_vc_details.json | community.general.json_query(query_id) }}"
  vars:
    query_id: "appInfo.dexApiUrl"

- name: DEBUG - cde_vc_endpoint
  debug:
    msg: "{{ cde_vc_endpoint }}"

- set_fact:
    cde_vc_endpoint_hostname: "{{ cde_vc_endpoint.split('//')[1].split('/')[0] }}"

- name: DEBUG - cde_vc_endpoint_hostname
  debug:
    msg: "{{ cde_vc_endpoint_hostname }}"

- set_fact:
    cde_vc_endpoint_hostname_wildcard: "*.{{ cde_vc_endpoint_hostname[9:] }}"

- name: DEBUG - cde_vc_endpoint_hostname_wildcard
  debug:
    msg: "{{ cde_vc_endpoint_hostname_wildcard }}"

# Prepare CDE certs directory
- set_fact:
    cde_certs_dir: "~/cluster-{{ cluster_name }}/pvc-certs"

- name: Create cert directory
  file:
    path: "{{ cde_certs_dir }}"
    state: directory
    recurse: yes

# Prepare root cert if not use_root_ca

- name: Generates rootCA if needed
  shell: |
    "openssl genrsa -out {{ cde_certs_dir }}/rootCA.key 4096"
    "openssl req -x509 -new -nodes -key {{ cde_certs_dir }}/rootCA.key -sha256 -days 1024 -out {{ cde_certs_dir }}/rootCA.crt -subj \"/C=FR/ST=Paris/L=Paris/O=Cloudera/OU=PS/CN=CDE-{{ virtual_cluster.env_name }}\" "
  when: not use_root_ca


# Prepare cert for endpoint

- name: Template openssl-ext.conf
  template: 
    src: openssl-ext.conf
    dest: "{{ cde_certs_dir }}/openssl-ext-{{ cde_vc_endpoint_hostname }}.conf"

- name: Generate key and csr for endpoint
  shell: "openssl req -nodes -newkey rsa:2048 -keyout {{ cde_certs_dir }}/endpoint-{{ cde_vc_endpoint_hostname }}.key -out {{ cde_certs_dir }}/endpoint-{{ cde_vc_endpoint_hostname }}.csr -subj \"/C=FR/ST=Paris/L=Paris/O=Cloudera/OU=PS/CN={{ cde_vc_endpoint_hostname_wildcard }}\" "

- name: Sign it using rootCA
  shell: "openssl x509 -req -extfile {{ cde_certs_dir }}/openssl-ext-{{ cde_vc_endpoint_hostname }}.conf -CA {{ cde_certs_dir }}/rootCA.crt -CAkey {{ cde_certs_dir }}/rootCA.key -CAcreateserial -days 365 -sha256 -in {{ cde_certs_dir }}/endpoint-{{ cde_vc_endpoint_hostname }}.csr -out {{ cde_certs_dir }}/endpoint-{{ cde_vc_endpoint_hostname }}.crt"
  when: not use_root_ca

- name: Sign it using provided rootCA
  shell: "openssl x509 -req -extfile {{ cde_certs_dir }}/openssl-ext-{{ cde_vc_endpoint_hostname }}.conf -CA {{ root_ca_cert }} -CAkey {{ root_ca_key }} -CAcreateserial -days 365 -sha256 -in {{ cde_certs_dir }}/endpoint-{{ cde_vc_endpoint_hostname }}.csr -out {{ cde_certs_dir }}/endpoint-{{ cde_vc_endpoint_hostname }}.crt"
  when: use_root_ca