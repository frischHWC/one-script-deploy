#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
- set_fact:
    dex_endpoint_api: "{{ cdp_endpoint_url }}/dex/api/v1"

- name: DEBUG - dex_endpoint_api
  debug:
    msg: "{{ dex_endpoint_api }}"
  when: debug | default(false)

- name: Get CDE Services
  uri:
    url: "{{ dex_endpoint_api }}/cluster"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: cde_clusters

- set_fact:
    cde_service_id: "{{ cde_clusters.json | community.general.json_query(query) }}"
  vars:
    query: "[?name == '{{ virtual_cluster.cde_service_name }}' && status != 'ClusterDeletionCompleted' ].id | [0]"


# Get VC Id

- name: Get CDE VCs
  uri:
    url: "{{ dex_endpoint_api }}/cluster/{{ cde_service_id }}/instance"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: cde_vcs

- set_fact:
    cde_vc_id: "{{ cde_vcs.json | community.general.json_query(query_id) }}"
  vars:
    query_id: "[?name == '{{ virtual_cluster.name }}' && status == 'AppInstalled'].id | [0]"


# Get VC endpoint

- name: Get CDE VC Details
  uri:
    url: "{{ dex_endpoint_api }}/cluster/{{ cde_service_id }}/instance/{{ cde_vc_id }}"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: cde_vc_details

- set_fact:
    cde_vc_endpoint: "{{ cde_vc_details.json | community.general.json_query(query_id) }}"
  vars:
    query_id: "appInfo.dexApiUrl"

- name: DEBUG - cde_vc_endpoint
  debug:
    msg: "{{ cde_vc_endpoint }}"
  when: debug | default(false)

- set_fact:
    cde_vc_endpoint_hostname: "{{ cde_vc_endpoint.split('//')[1].split('/')[0] }}"

- name: DEBUG - cde_vc_endpoint_hostname
  debug:
    msg: "{{ cde_vc_endpoint_hostname }}"
  when: debug | default(false)

- set_fact:
    cde_vc_endpoint_hostname_wildcard: "*.{{ cde_vc_endpoint_hostname[9:] }}"

- name: DEBUG - cde_vc_endpoint_hostname_wildcard
  debug:
    msg: "{{ cde_vc_endpoint_hostname_wildcard }}"
  when: debug | default(false)

- set_fact:
    cde_certs_dir: "~/cluster-{{ cluster_name }}/pvc-certs"
    
# Copy files
- name: Copy cert file 
  copy:
    src: "{{ cde_certs_dir }}/endpoint-{{ cde_vc_endpoint_hostname }}.crt"
    dest: "~/"

- name: Copy key file 
  copy:
    src: "{{ cde_certs_dir }}/endpoint-{{ cde_vc_endpoint_hostname }}.key"
    dest: "~/"


# Send certs

- name: Add certs with script to VC
  shell: "./cde-utils.sh init-virtual-cluster -h {{ cde_vc_endpoint_hostname }} -c endpoint-{{ cde_vc_endpoint_hostname }}.crt -k endpoint-{{ cde_vc_endpoint_hostname }}.key"
  when: pvc_version is version('1.5.5','<')


# Upload cert using API from 1.5.5
- name: Slurp cert file
  slurp:
    src: "endpoint-{{ cde_vc_endpoint_hostname }}.crt"
  register: slurped_crt

- name: Decode cert file 
  set_fact:
    cde_crt: "{{ slurped_crt.content }}"

- name: Slurp key file
  slurp:
    src: "endpoint-{{ cde_vc_endpoint_hostname }}.key"
  register: slurped_key

- name: Decode key file 
  set_fact:
    cde_key: "{{ slurped_key.content }}"

- name: DEBUG - cert.json content
  debug:
    msg: "{{ lookup('template', 'certs.json') }}"
  when: debug | default(false)

- name: Push certificate to Service ID
  uri:
    url: "{{ dex_endpoint_api }}/cluster/{{ cde_service_id }}/tls"
    method: PUT
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body: "{{ lookup('template', 'certs.json') }}"
    body_format: json
    status_code: 200
    return_content: yes
    validate_certs: no
  register: answer_push_certs
  when: pvc_version is version('1.5.5','>=')

- name: DEBUG - answer_push_certs
  debug:
    msg: "{{ answer_push_certs }}"
  when: debug | default(false)

- name: Wait 15 seconds before pushing other TLS
  wait_for:
    timeout: 15

- name: Push certificate to VC
  uri:
    url: "{{ dex_endpoint_api }}/cluster/{{ cde_service_id }}/instance/{{ cde_vc_id }}/tls"
    method: PUT
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body: "{{ lookup('template', 'certs.json') }}"
    body_format: json
    status_code: 200
    return_content: yes
    validate_certs: no
  register: answer_push_certs
  when: pvc_version is version('1.5.5','>=')

- name: DEBUG - answer_push_certs
  debug:
    msg: "{{ answer_push_certs }}"
  when: debug | default(false)