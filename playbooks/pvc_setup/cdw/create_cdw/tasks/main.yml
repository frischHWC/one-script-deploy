#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
# Get Environment details
- set_fact:
    dwx_endpoint_api: "{{ cdp_endpoint_url }}/dwx/api/v2"

- name: DEBUG - dwx_endpoint_api
  debug:
    msg: "{{ dwx_endpoint_api }}"

- set_fact:
    activate_env_template: 'activate_env.json'

- set_fact:
    activate_env_template: 'activate_env_v1.5.2.json'
  when: pvc_version is version('1.5.2', '>=')

- set_fact:
    activate_env_template: 'activate_env_v1.5.5.json'
  when: pvc_version is version('1.5.5', '>=')

- set_fact:
    create_hive_vw_template: 'create_hive_vw.json'

- set_fact:
    create_hive_vw_template: 'create_hive_vw_v1.5.2.json'
  when: pvc_version is version('1.5.2', '>=')

- set_fact:
    create_hive_vw_template: 'create_hive_vw_v1.5.4.json'
  when: pvc_version is version('1.5.4', '>=')

- set_fact:
    create_hive_vw_template: 'create_hive_vw_v1.5.5.json'
  when: pvc_version is version('1.5.5', '>=')

- set_fact:
    create_impala_vw_template: 'create_impala_vw.json'

- set_fact:
    create_impala_vw_template: 'create_impala_vw_v1.5.2.json'
  when: pvc_version is version('1.5.2', '>=')

- set_fact:
    create_impala_vw_template: 'create_impala_vw_v1.5.4.json'
  when: pvc_version is version('1.5.4', '>=')

- set_fact:
    create_impala_vw_template: 'create_impala_vw_v1.5.5.json'
  when: pvc_version is version('1.5.5', '>=')


- name: Get Environment CRN
  uri:
    url: "{{ dwx_endpoint_api }}/environments"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dwx_environments

- name: DEBUG - dwx_environments
  debug:
    msg: "{{ dwx_environments }}"
    
- set_fact:
    dwx_env_crn: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ warehouse.env_name }}' ].environmentCRN | [0]"

- name: DEBUG - dwx_env_crn
  debug:
    msg: "{{ dwx_env_crn }}"

- set_fact:
    dwx_env_id: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ warehouse.env_name }}' ].id | [0]"

- name: DEBUG - dwx_env_id
  debug:
    msg: "{{ dwx_env_id }}"

- set_fact:
    dwx_env_status: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ warehouse.env_name }}' ].status | [0]"

- name: DEBUG - dwx_env_status
  debug:
    msg: "{{ dwx_env_status }}"


- name: Push servers settings
  uri:
    url: "{{ dwx_endpoint_api }}/server_setting"
    method: PUT
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'cdw_server_settings.json') }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: answer_to_server_settings
  when: pvc_version is version('1.5.5', '<=')

- name: DEBUG - answer_to_server_settings
  debug:
    msg: "{{ answer_to_server_settings }}"
  when: pvc_version is version('1.5.5', '<=')


# Activate env (that will trigger default Database Catalog to be created)
- name: JSON to activate env
  debug:
    msg: "{{ lookup('template', '{{ activate_env_template }}') }}"
  when: dwx_env_status != 'Running' and debug | default(false)

- name: Activate Environment and create Database Catalog
  uri:
    url: "{{ dwx_endpoint_api }}/environments?environmentCrn={{ dwx_env_crn }}"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', '{{ activate_env_template }}') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
    timeout: 300
  register: answer_to_activate_env
  when: dwx_env_status != 'Running'

- name: Get new environment ID (once environment has been activated) 
  set_fact:
    dwx_env_id: "{{ answer_to_activate_env.json | community.general.json_query(query) }}"
  vars:
    query: "clusterId"
  when: dwx_env_status != 'Running'

- name: DEBUG - dwx_env_id
  debug:
    msg: "{{ dwx_env_id }}"
  when: dwx_env_status != 'Running'

#  Wait for Environment to be running
- name: Set env request query for url for PVC 1.5.1 and less
  set_fact:
    dwx_env_request_query_url: "/{{ dwx_env_id }}"
  when: pvc_version is version('1.5.2', '<')

- name: Set env request query for url for PVC 1.5.2+
  set_fact:
    dwx_env_request_query_url: "?environmentCrn={{ dwx_env_id }}"
  when: pvc_version is version('1.5.2', '>=')

- name: DEBUG - dwx_env_request_query_url
  debug:
    msg: "{{ dwx_env_request_query_url }}"

- name: Check Environment running
  uri:
    url: "{{ dwx_endpoint_api }}/environments{{ dwx_env_request_query_url }}"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: env_activation
  until: " env_activation.json.cluster.status == 'Running' "
  retries: 60
  delay: 5

# Check if Database Catalog is already set up
- name: Get Environments to check Database Catalog Creation
  uri:
    url: "{{ dwx_endpoint_api }}/environments"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dwx_environments

- name: DEBUG - dwx_environments
  debug:
    msg: "{{ dwx_environments }}"

- set_fact:
    dwx_dbc_id: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ warehouse.env_name }}' ].clusterState.warehouses.[*] | [0] | [0] [?warehouse.displayName == '{{ warehouse.database_catalog_name }}' ] | [0].warehouse.id"

- name: DEBUG - dwx_dbc_id
  debug:
    msg: "{{ dwx_dbc_id }}"

- set_fact:
    dwx_dbc_is_existing: "{{ false if dwx_dbc_id == '' else true }}"

- name: DEBUG - dwx_dbc_is_existing
  debug:
    msg: "{{ dwx_dbc_is_existing }}"

# Create DBC if not already present 
- name: JSON to create dbc
  debug:
    msg: "{{ lookup('template', '{{ activate_env_template }}') }}"
  when: not dwx_dbc_is_existing and debug | default(false)

- name: Create Database Catalog 
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/warehouses?start="
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: [200, 202]
    body_format: json
    body: "{{ lookup('template', 'create_dbc.json') }}"
    return_content: yes
    validate_certs: no
  register: create_dbc
  when: not dwx_dbc_is_existing

- name: DEBUG - create_dbc
  debug:
    msg: "{{ create_dbc }}"
  when: not dwx_dbc_is_existing

- name: Get Environments to get new Database Catalog ID
  uri:
    url: "{{ dwx_endpoint_api }}/environments"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dwx_environments
  when: not dwx_dbc_is_existing

- name: DEBUG - dwx_environments
  debug:
    msg: "{{ dwx_environments }}"
  when: not dwx_dbc_is_existing
    
- set_fact:
    dwx_dbc_id: "{{ dwx_environments.json | community.general.json_query(query) }}"
  vars:
    query: "clusters[?name == '{{ warehouse.env_name }}' ].clusterState.warehouses.[*] | [0] | [0] [?warehouse.displayName == '{{ warehouse.database_catalog_name }}' ] | [0].warehouse.id"
  when: not dwx_dbc_is_existing

- name: DEBUG - dwx_dbc_id
  debug:
    msg: "{{ dwx_dbc_id }}"
    

# Wait for DBC to be running 
- name: Check Database Catalog Activation
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/warehouses/{{ dwx_dbc_id }}?render=true"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: dbc_activation
  until: " dbc_activation.json.Warehouse.warehouse.status == 'Running' "
  retries: 60
  delay: 5

#Delete VW if required
- name: Get Hive Virtual Warehouse
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/llaps/compute-{{ warehouse.name }}"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: [200, 202, 404]
    return_content: yes
    validate_certs: no
  register: answer_to_hive_vw
  when: warehouse.type == 'hive' | default(false)

- set_fact:
    vw_code: "{{ answer_to_hive_vw.json | community.general.json_query(query_id) }}"
  vars:
    query_id: "code"
  when: warehouse.type == 'hive' | default(false)

- name: DEBUG - vw_code
  debug:
    msg: "{{ vw_code }}"
  when: warehouse.type == 'hive' | default(false)

- set_fact:
    hive_vw_is_existing: "{{ false if vw_code == '1002' else true }}"
  when: warehouse.type == 'hive' | default(false)

- name: DEBUG - hive_vw_is_existing
  debug:
    msg: "{{ hive_vw_is_existing }}"
  when: warehouse.type == 'hive' | default(false)

- name: Delete Hive Virtual Warehouse
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/llaps/compute-{{ warehouse.name }}"
    method: DELETE
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: answer_to_hive_activation
  when: warehouse.type == 'hive' and (hive_vw_is_existing and warehouse.to_recreate) | default(false)


# Create Hive VW:
- name: Wait 15 seconds before creating VW
  wait_for:
    timeout: 15
  when: warehouse.type == 'hive' | default(false)

- name: Check VW does not exist
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/llaps/compute-{{ warehouse.name }}"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: [200, 202, 404]
    return_content: yes
    validate_certs: no
  register: answer_to_hive_vw
  when: warehouse.type == 'hive' | default(false)
  until: " answer_to_hive_vw.json.code == 1002 "
  retries: 50
  delay: 30

- name: Wait 30 seconds before creating VW, to make sure namespace has been deleted
  wait_for:
    timeout: 30
  when: warehouse.type == 'hive' and (hive_vw_is_existing and warehouse.to_recreate) | default(false)

- name: JSON to create Hive VW
  debug:
    msg: "{{ lookup('template', '{{ create_hive_vw_template }}') }}"
  when:  warehouse.type == 'hive' | default(false) and debug | default(false)

- name: Create Hive Virtual Warehouse
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/llaps?start="
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', '{{ create_hive_vw_template }}') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: answer_to_hive_activation
  when: warehouse.type == 'hive' and ( not hive_vw_is_existing or (hive_vw_is_existing and warehouse.to_recreate)) | default(false)


#Delete VW if required
- name: Get Impala Virtual Warehouse
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/impalas/impala-{{ warehouse.name }}"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: [200, 202, 404]
    return_content: yes
    validate_certs: no
  register: answer_to_impala_vw
  when: warehouse.type == 'impala' | default(false)

- set_fact:
    vw_code: "{{ answer_to_impala_vw.json | community.general.json_query(query_id) }}"
  vars:
    query_id: "code"
  when: warehouse.type == 'impala' | default(false)

- set_fact:
    impala_vw_is_existing: "{{ false if vw_code == '1002' else true }}"
  when: warehouse.type == 'impala' | default(false)

- name: DEBUG - impala_vw_is_existing
  debug:
    msg: "{{ impala_vw_is_existing }}"
  when: warehouse.type == 'impala' and debug | default(false)

- name: Delete Impala Virtual Warehouse
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/impalas/impala-{{ warehouse.name }}"
    method: DELETE
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: answer_to_hive_activation
  when: warehouse.type == 'impala' and (impala_vw_is_existing and warehouse.to_recreate) | default(false)


# Create Impala VW
- name: Wait 15 seconds before creating VW
  wait_for:
    timeout: 15
  when: warehouse.type == 'impala' | default(false)

- name: Check VW does not exist
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/impalas/impala-{{ warehouse.name }}"
    method: GET
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: [200, 202, 404]
    return_content: yes
    validate_certs: no
  register: answer_to_hive_vw
  when: warehouse.type == 'hive' | default(false)
  until: " answer_to_hive_vw.json.code == 1002 "
  retries: 50
  delay: 30

- name: Wait 30 seconds before creating VW, to make sure namespace has been deleted
  wait_for:
    timeout: 30
  when: warehouse.type == 'impala' and (impala_vw_is_existing and warehouse.to_recreate) | default(false)

- name: JSON to create Impala VW
  debug:
    msg: "{{ lookup('template', '{{ create_impala_vw_template }}') }}"
  when:  warehouse.type == 'impala' | default(false) and debug | default(false)

- name: Create Impala Virtual Warehouse
  uri:
    url: "{{ dwx_endpoint_api }}/environments/{{ dwx_env_id }}/impalas?start="
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', '{{ create_impala_vw_template }}') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: answer_to_impala_activation
  when: warehouse.type == 'impala' and ( not impala_vw_is_existing or (impala_vw_is_existing and warehouse.to_recreate)) | default(false)
