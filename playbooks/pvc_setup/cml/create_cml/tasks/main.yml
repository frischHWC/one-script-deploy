#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
# Get Environment details
- set_fact:
    cml_endpoint_api: "{{ cdp_endpoint_url }}/api/v1/ml"

- name: DEBUG - cml_endpoint_api
  debug:
    msg: "{{ cml_endpoint_api }}"

- name: Set nfs storage class to use for ECS
  set_fact: 
    nfs_storage_class_to_use: "{{ oc_nfs_storage_class }}"
  when: pvc_type == 'ECS' and workspace.nfs_storage_class is not defined

- name: Set nfs storage class to use
  set_fact: 
    nfs_storage_class_to_use: "{{ oc_nfs_storage_class }}"
  when: pvc_type == 'OC' and ( workspace.nfs_storage_class is not defined or workspace.nfs_storage_class == 'longhorn' )

# TODO: Remake this to check it is existing before 
- name: Check CML workspace exists
  uri:
    url: "{{ cml_endpoint_api }}/listWorkspaces"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: cml_workspaces_list

- set_fact:
    workspace_crn: "{{ cml_workspaces_list.json | community.general.json_query(query) }}"
  vars:
    query: "workspaces[?instanceName == '{{ workspace.name }}' ].crn | [0]"

- name: DEBUG - workspace_crn
  debug:
    msg: "{{ workspace_crn }}"
  when: debug | default(false)

- set_fact:
    is_workspace_existing: "{{ false if workspace_crn == '' else true }}"

# Delete workspace if existing and needed
- name: Delete existing workspace
  uri:
    url: "{{ cml_endpoint_api }}/deleteWorkspace"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'delete_workspace.json') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: cml_workspaces_list
  when: is_workspace_existing and workspace.to_recreate

- name: Wait for Deletion to be done
  pause:
    seconds: 60
  when: is_workspace_existing and workspace.to_recreate

- set_fact:
    create_cml_template: 'create_cml.json'

- set_fact:
    create_cml_template: 'create_cml_1_5_5.json'
  when: pvc_version is version('1.5.5', '>=')

# Create Workspace
- name: Create CML Workspace
  uri:
    url: "{{ cml_endpoint_api }}/createWorkspace"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', '{{ create_cml_template }}') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: answer_to_create_cml
  when: not is_workspace_existing or ( is_workspace_existing and workspace.to_recreate )

- name: Wait for Creation to be acknowledged
  pause:
    seconds: 120
  when: not is_workspace_existing or ( is_workspace_existing and workspace.to_recreate )

# Wait for CML workspace to be created
- name: Check CML creation
  uri:
    url: "{{ cml_endpoint_api }}/describeWorkspace"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'check_cml_activation.json') }}"
    status_code: [200, 202]
    return_content: yes
    validate_certs: no
  register: cml_activation_answer
  until: " cml_activation_answer.json.workspace.instanceStatus == 'installation:finished' "
  retries: 60
  delay: 30
  when: not is_workspace_existing or ( is_workspace_existing and workspace.to_recreate )


# Reducing resources

- name: Scale down web-hpa
  shell: "kubectl patch hpa web-hpa  -n {{ workspace.name }} --patch $'spec:\n minReplicas: 1' "
  when: pvc_eco_resources
  ignore_errors: true

- name: Scale down web
  shell: "kubectl scale deployment web  -n {{ workspace.name }} --replicas=1"
  when: pvc_eco_resources
  ignore_errors: true

- name: Lower CML web cpu
  shell: "kubectl set resources deployment web  -n {{ workspace.name }} --requests=cpu=0.5"
  when: pvc_eco_resources
  ignore_errors: true

- name: Lower CML db memory
  shell: "kubectl set resources sts db  -n {{ workspace.name }} --requests=memory=0.5"
  when: pvc_eco_resources
  ignore_errors: true

- name: Lower CML db cpu
  shell: "kubectl set resources sts db  -n {{ workspace.name }} --requests=cpu=0.5"
  when: pvc_eco_resources
  ignore_errors: true