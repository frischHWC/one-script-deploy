#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
# Check: https://cloudera.github.io/cdp-dev-docs/cli-docs/environments/create-private-environment.html

# List environments
- name: List Environments and get its crn
  uri:
    url: "{{ pvc_api_call }}/environments2/listEnvironments"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{\"pageSize\":500}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: env_details

- set_fact:
    env_crn: "{{ env_details.json | community.general.json_query(query) }}"
  vars:
    query: "environments[?environmentName == '{{ env.name }}' ].crn | [0]"

- name: DEBUG - env_crn
  debug:
    msg: "{{ env_crn }}"
  when: debug | default(false)

- set_fact:
    is_env_existing: "{{ false if env_crn == '' else true }}"

# TODO: Delete all previous CDW/CML/CDE
# If env.to_delete:
# List CML workspaces and delete them
# List CDE services, then VCs attached to it and delete them one by one, then delete cde services
# List DBC, list VW attached to DBC and delete them one by one, then delete DBCs
- name: De-register environment
  uri:
    url: "{{ pvc_api_call }}/compute/deregisterClusters"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'deregister_cluster.json') }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: env_deregister
  when: is_env_existing and env.to_delete

- name: DEBUG - env_deregister
  debug:
    msg: "{{ env_deregister }}"
  when: (is_env_existing and env.to_delete) and (debug | default(false))

- name: Sleep for 5 seconds before deleting environment
  wait_for:
    timeout: 5
  when: is_env_existing and env.to_delete

- name: Delete environment
  uri:
    url: "{{ pvc_api_call }}/environments2/deleteEnvironment"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'delete_environment.json') }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: env_delete
  when: is_env_existing and env.to_delete

- name: DEBUG - env_delete
  debug:
    msg: "{{ env_delete }}"
  when: (is_env_existing and env.to_delete) and (debug | default(false))

- name: Sleep for 15 seconds before creating again environment
  wait_for:
    timeout: 15
  when: is_env_existing and env.to_delete

- set_fact:
    create_env_template: 'create_environment.json'

- set_fact:
    create_env_template: 'create_environment_1_5_5.json'
  when: pvc_version is version('1.5.5', '>=')

- name: Create environment
  uri:
    url: "{{ pvc_api_call }}/environments2/createPrivateEnvironment"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', '{{ create_env_template }}') }}"
    status_code: 200
    return_content: yes
    validate_certs: no
    timeout: 60
  register: env_creation
  when: pvc_type == "OC" and (is_env_existing and env.to_delete) or not is_env_existing

- name: DEBUG - env_creation
  debug:
    msg: "{{ env_creation }}"
  when: (is_env_existing and env.to_delete) or not is_env_existing and (debug | default(false))



- name: List Environments and get its crn
  uri:
    url: "{{ pvc_api_call }}/environments2/listEnvironments"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{\"pageSize\":500}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: env_details

- name: DEBUG - env_details
  debug:
    msg: "{{ env_details }}"
  when: debug | default(false)

- set_fact:
    env_crn: "{{ env_details.json | community.general.json_query(query) }}"
  vars:
    query: "environments[?environmentName == '{{ env.name }}' ].crn | [0]"

- name: DEBUG - env_crn
  debug:
    msg: "{{ env_crn }}"
  when: debug | default(false)

- name: Register Compute cluster to Environment
  uri:
    url: "{{ pvc_api_call }}/compute/registerCluster"
    method: POST
    headers: 
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    body_format: json
    body: "{{ lookup('template', 'register_cluster.json') }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: answer_to_register_cluster
  when: pvc_type == "OC" and ((is_env_existing and env.to_delete) or not is_env_existing)

- name: DEBUG - answer_to_register_cluster
  debug:
    msg: "{{ answer_to_register_cluster }}"
  when: pvc_type == "OC" and ((is_env_existing and env.to_delete) or not is_env_existing)

# Need to get the namespace of the environment and create the log-router namespace based on its name before creating it.
- name: Get monitoring platform namespace name
  shell: "kubectl get ns | grep monitoring-platform | cut -d' ' -f 1"
  register: monitoring_platform_full_name
  when: pvc_version == '1.4.1'

- name: DEBUG - monitoring_platform_full_name
  debug:
    msg: "{{ monitoring_platform_full_name }}"
  when:  pvc_version == '1.4.1' and debug | default(false)

- set_fact:
    log_router_namespace_name: "{{ monitoring_platform_full_name.stdout | replace('monitoring-platform', 'log-router') }}"
  when: pvc_version == '1.4.1'

- name: DEBUG - log_router_namespace_name
  debug:
    msg: "{{ log_router_namespace_name }}"
  when:  pvc_version == '1.4.1' and debug | default(false)

- name: Create empty log-router namespace
  shell: "kubectl create ns {{ log_router_namespace_name }}"
  when: pvc_version == '1.4.1'
  ignore_errors: true


# Creation of env maybe different ?

